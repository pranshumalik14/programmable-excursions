"""
Miscellaneous utilities (types and functions) to provide a basis for generating a smooth
scanning profile around an object, preferably a constant distance away from the surface
while accounting for other objects/obstacles in the way. Functions to plot map and points
are also provided.
"""

using Plots
using Parameters
using LinearAlgebra
using StaticArrays

# !!todo:!! convert geometric entity to world frame before plotting

# !!todo:!! frame assertion should just happen with frame name or frame contents.
# a question of allowing duplicate frame names in the environment; will also remove error
# with the frame change tracking.

# !!todo!!: compose pose with frame; sets frame as reference for pose automatically; will
# have to involve ùëä() as well since frames are wrt world, and if world is not set to 0 then
# answers will be different

# !!todo!!: construction of a Pose2 with ùëà and ùëâ having the same names should be
# automatically made Zero2; with a warning message in the logger

# !!todo!!:for default names, create a unique numbered (static global variable) frame so
# that unwanted degeneration from Pose2 to Zero2 doesn't occur

"""
Types and struct definitions for holding map and pose information
"""

abstract type GeometricEntity end
abstract type AbstractPose <: GeometricEntity end
abstract type AbstractFrame <: GeometricEntity end
abstract type AbstractPoint <: GeometricEntity end

# holds 2D map and its properties to hold the (sliced) object and environment information
@with_kw mutable struct Map
    map::Matrix{Real}
    low::Real
    high::Real
    und::Real
    res::Real
end

# represents a 2D frame, (implicitly) wrt world frame. a frame is immutable, and by
# default, defined wrt the (right-handed) world  coordinate frame.  note that, by
# convention, Œ∏ (rad) increases in the anticlockwise direction. the 2D frame entity lives
# in SE(2).
@with_kw struct Frame2 <: AbstractFrame
    x::Real
    y::Real
    Œ∏::Real # todo: conversion to (-œÄ, œÄ] to be looked up; also should be transform stable.
    name::AbstractString
end

# returns a world coordinate frame at origin set to (x,y,Œ∏) = (0,0,0)
ùëä() = Frame2(0, 0, 0, "world")

# holds 2D point information; a 2D bounded vector wrt frame {ùëâ}
@with_kw mutable struct Point2 <: AbstractPoint
    x::Real
    y::Real
    ùëâ::Frame2 = ùëä()
end

# type alias for a 2D point (inferred as a bound-to-frame vector)
const Vector2 = Point2

# representation of 2D relative pose, ·µõŒæ·µ§, head (pseudo) frame {ùëà} wrt tail frame {ùëâ} or
# rigid body motion from {ùëà} to {ùëâ}. the default reference frame {ùëâ} is the world frame.
# the 2D pose entity lives in SE(2).
@with_kw mutable struct Pose2 <: AbstractPose
    ùëà::Frame2 = Frame2(0, 0, 0, "unnamed") # Frame{pose head}
    ùëâ::Frame2 = ùëä() # Frame{pose tail/base (reference)}
end

# explicit representation of a zero pose
struct Zero2 <: AbstractPose
    ùëà::Frame2
    ùëâ::Frame2

    function Zero2()
        ùëà = Frame2(0, 0, 0, "zero")
        ùëâ = ùëà
        new(ùëà, ùëâ)
    end
end

# returns a zero relative pose
ùëç() = Zero2()

# type alias for union of all 2D geometric entities
const GeometricEntity2D = Union{Pose2,Point2,Frame2,Zero2}


"""
Custom constructors and field accessors for pose, frame, and point.
"""

# Pose2(x,y,Œ∏; name=head_frame_name, ùëâ=base_frame);
function Pose2(x::Real, y::Real, Œ∏::Real; name::S="unnamed", ùëâ::Frame2=ùëä()) where
    {S <: AbstractString}
    ùëà = Frame2(x, y, Œ∏, name)
    Pose2(ùëà, ùëâ)
end

# Frame2(·µõŒæ·µ§) creates frame  ∑{ùëà}
function Frame2(Œæ::P) where {P <: Union{Pose2,Zero2}}
    x, y, Œ∏ = compose2(@SVector([Œæ.ùëâ.x, Œæ.ùëâ.y, Œæ.ùëâ.Œ∏]), @SVector([Œæ.x, Œæ.y, Œæ.Œ∏]))
    Frame2(x, y, Œ∏, Œæ.name) #  ∑{ùëà}
end

# Point2(x,y)
function Point2(x::Real, y::Real)
    Point2(x, y, ùëä())
end

# Point2(·µõŒæ·µ§) = Point2(·µõ{ùëà}); creates the origin of the frame {ùëà} wrt frame {ùëâ}
function Point2(Œæ::P) where {P <: Union{Pose2,Zero2}}
    Œæ ‚ãÖ Point2(0.0, 0.0, Œæ.ùëà)
end

# Point2( ∑{ùêπ}); origin of frame {ùêπ} wrt world
function Point2(ùëà::Frame2)
    Point2(ùëà.x, ùëà.y, ùëä())
end

# Pose2 custom field accessors for ease of use (Pose2.{x,y,Œ∏})
function Base.getproperty(Œæ::P, field::Symbol) where {P <: Union{Pose2,Zero2}}
    if field ‚àà (:ùëà, :ùëâ)     # head/base frames
        return getfield(Œæ, field)
    elseif field === :x     # x coordinate
        return getfield(getfield(Œæ, :ùëà), :x)
    elseif field === :y     # y coordinate
        return getfield(getfield(Œæ, :ùëà), :y)
    elseif field === :Œ∏     # angle Œ∏ (ccw); head frame {ùëà} to relative to base frame {ùëâ}
        return getfield(getfield(Œæ, :ùëà), :Œ∏)
    elseif field === :name  # name of the head frame
        return getfield(getfield(Œæ, :ùëà), :name)
    else
        error("Property $field for $Œæ not defined!")
    end
end

# Point2 custom isapprox (‚âà) function
function Base.isapprox(p‚ÇÅ::Point2, p‚ÇÇ::Point2)
    if p‚ÇÅ.ùëâ.name == p‚ÇÇ.ùëâ.name
        # direct comparison for same ref frame
        return p‚ÇÅ.x ‚âà p‚ÇÇ.x && p‚ÇÅ.y ‚âà p‚ÇÇ.y
    else
        # convert ·µõp‚ÇÇ to reference frame of ·µòp‚ÇÅ before direct comparison
        ·µòŒæ·µ• = (- Pose2(ùëà=p‚ÇÅ.ùëâ)) ‚äï Pose2(ùëà=p‚ÇÇ.ùëâ) # ·µòŒæ·µ• = ‚äñ  ∑Œæ·µ§ ‚äï  ∑Œæ·µ•
        pÃÉ‚ÇÇ  = ·µòŒæ·µ• ‚ãÖ p‚ÇÇ
        return p‚ÇÅ.x ‚âà pÃÉ‚ÇÇ.x && p‚ÇÅ.y ‚âà pÃÉ‚ÇÇ.y
    end
end


"""
Pose and point operations and algebra:
1. ·µóŒæ·µ§ ‚äï ·µòŒæ·µ• = ·µóŒæ·µ•
2. Œæ‚ÇÅ ‚äï Œæ‚ÇÇ ‚â† Œæ‚ÇÇ ‚äï Œæ‚ÇÅ
3. ‚äñ ·µóŒæ·µ§ = ·µòŒæ‚Çú
4. Œæ ‚äñ Œæ = ùëÇ; ‚äñ Œæ ‚äï Œæ = ùëÇ
5. Œæ ‚äñ ùëÇ = Œæ; Œæ ‚äï ùëÇ = Œæ
6. ·µóŒæ·µ§ ‚ãÖ ·µòp = ·µóp
"""

# oplus operator for pose; by default requires base and reference frames to be same
function ‚äï(Œæ‚ÇÅ::Union{Pose2,Zero2}, Œæ‚ÇÇ::Union{Pose2,Zero2})
    if Œæ‚ÇÅ isa Zero2
        return Œæ‚ÇÇ
    elseif Œæ‚ÇÇ isa Zero2
        return Œæ‚ÇÅ
    else
        @assert Œæ‚ÇÅ.ùëà.name == Œæ‚ÇÇ.ùëâ.name
        if (Œæ‚ÇÅ.ùëâ.name == Œæ‚ÇÇ.ùëà.name) return ùëç() end
        x, y, Œ∏ = compose2(@SVector([Œæ‚ÇÅ.x, Œæ‚ÇÅ.y, Œæ‚ÇÅ.Œ∏]), @SVector([Œæ‚ÇÇ.x, Œæ‚ÇÇ.y, Œæ‚ÇÇ.Œ∏]))
        ùëà = Frame2(x, y, Œ∏, Œæ‚ÇÇ.name)
        return Pose2(ùëà, Œæ‚ÇÅ.ùëâ) # todo: check if this is same as Pose2(x‚ÇÅ + x‚ÇÇ, y‚ÇÅ + y‚ÇÇ, Œ∏‚ÇÅ + Œ∏‚ÇÇ)
    end
end

# compose operator for pose, with no frame assertion; returns unnamed pose wrt {Œæ‚ÇÅ.ùëâ}
function Base.:‚àò(Œæ‚ÇÅ::Union{Pose2,Zero2}, Œæ‚ÇÇ::Union{Pose2,Zero2})
    if Œæ‚ÇÅ isa Zero2
        return Œæ‚ÇÇ
    elseif Œæ‚ÇÇ isa Zero2
        return Œæ‚ÇÅ
    else
        x, y, Œ∏ = compose2(@SVector([Œæ‚ÇÅ.x, Œæ‚ÇÅ.y, Œæ‚ÇÅ.Œ∏]), @SVector([Œæ‚ÇÇ.x, Œæ‚ÇÇ.y, Œæ‚ÇÇ.Œ∏]))
        ùëà = Frame2(x, y, Œ∏, "unnamed")
        return Pose2(ùëà, Œæ‚ÇÅ.ùëâ) # todo: check if this is same as Pose2(x‚ÇÅ + x‚ÇÇ, y‚ÇÅ + y‚ÇÇ, Œ∏‚ÇÅ + Œ∏‚ÇÇ)
    end
end

# plus binary operator for pose, with no frame assertion; returns unnamed pose wrt {Œæ‚ÇÅ.ùëâ}
Base.:+(Œæ‚ÇÅ::Union{Pose2,Zero2}, Œæ‚ÇÇ::Union{Pose2,Zero2}) = Base.:‚àò(Œæ‚ÇÅ, Œæ‚ÇÇ)

# minus unary operator for pose
function Base.:-(Œæ::P) where {P <: Union{Pose2,Zero2}}
    # get global frame  ∑{ùëà} and then return inverse relative pose
    ùëá = @SMatrix   [cos(Œæ.Œ∏) -sin(Œæ.Œ∏) Œæ.x;
                    sin(Œæ.Œ∏)  cos(Œæ.Œ∏) Œæ.y;
                    0         0          1]
     ∑ùëà = Frame2(Œæ)
    ùëá‚Åª¬π = inv(ùëá) # todo: check if ‚àº (-x,-y, -Œ∏)

    return Pose2(ùëá‚Åª¬π[1,3], ùëá‚Åª¬π[2, 3], atan(ùëá‚Åª¬π[2, 1], ùëá‚Åª¬π[1, 1]); name=Œæ.ùëâ.name, ùëâ= ∑ùëà)
end

# ominus binary operator for pose
‚äñ(Œæ‚ÇÅ::Union{Pose2,Zero2}, Œæ‚ÇÇ::Union{Pose2,Zero2}) = Œæ‚ÇÅ ‚äï -(Œæ‚ÇÇ)

# minus binary operator for pose; composes Œæ‚ÇÅ and -(Œæ‚ÇÇ) without frame assertion
Base.:-(Œæ‚ÇÅ::Union{Pose2,Zero2}, Œæ‚ÇÇ::Union{Pose2,Zero2}) = Œæ‚ÇÅ ‚àò -(Œæ‚ÇÇ)

# returns (x, y, Œ∏) ‚àº (T‚ÇÅ ‚àò T‚ÇÇ) where T·µ¢ ‚àà SE(2)
@inline function compose2(T‚ÇÅ::SVector{3}, T‚ÇÇ::SVector{3})
    ùëÖ‚ÇÅ = @SMatrix   [cos(T‚ÇÅ[3]) -sin(T‚ÇÅ[3]);
                     sin(T‚ÇÅ[3])  cos(T‚ÇÅ[3]);]
    ùëá‚ÇÅ = [[ùëÖ‚ÇÅ T‚ÇÅ[1:2]]; SA[0 0 1]]

    ùëÖ‚ÇÇ = @SMatrix   [cos(T‚ÇÇ[3]) -sin(T‚ÇÇ[3]);
                     sin(T‚ÇÇ[3])  cos(T‚ÇÇ[3]);]
    ùëá‚ÇÇ = [[ùëÖ‚ÇÇ T‚ÇÇ[1:2]]; SA[0 0 1]]

    ùëá = ùëá‚ÇÅ * ùëá‚ÇÇ

    return (ùëá[1,3], ùëá[2, 3], atan(ùëá[2, 1], ùëá[1, 1])) # x, y, Œ∏ of the composed transform
end

# returns a rotation transformation from 2D frame {ùëà} to reference frame {ùëâ}, ·µõR·µ§
@inline function rot2(Œæ::P) where {P <: Union{Pose2,Zero2}}
    @unpack ùëà = Œæ; @unpack Œ∏ = ùëà;
    return @SMatrix ([cos(Œ∏) -sin(Œ∏);
                      sin(Œ∏)  cos(Œ∏)])
end

# returns a translation vector from reference frame {ùëâ} to 2D frame {ùëà}, ·µõt·µ§
@inline function transl2(Œæ::P) where {P <: Union{Pose2,Zero2}}
    @unpack ùëà = Œæ;
    return @SVector [ùëà.x, ùëà.y]
end

# dot operator for point frame transformation by a relative pose, ·µõŒæ·µ§ ‚ãÖ ·µòp = ·µõp
function ‚ãÖ(Œæ::P, p::Point2) where {P <: Union{Pose2,Zero2}}
    if Œæ isa Zero2 && p.ùëâ.name ‚àà ("world", "zero")
        return p
    end

    # point should be relative to head frame of the pose
    @assert Œæ.ùëà.name == p.ùëâ.name && p.ùëâ.name ‚â† "null"

    # 2D homogenous transform from {ùëà} to {ùëâ}
    ·µõùëÖ·µ§ = rot2(Œæ)
    ·µõùë°·µ§ = transl2(Œæ)
    ·µõùëá·µ§ =   [[·µõùëÖ·µ§  ·µõùë°·µ§];
            SA[0  0  1]]
    ·µòpÃÉ = [p.x, p.y, 1]      # homogenous vector for source point
    ·µõx, ·µõy, _ = ·µõùëá·µ§ * ·µòpÃÉ    # homogenous vector for target point

    return Point2(·µõx, ·µõy, Œæ.ùëâ)
end

# extending `+` binary operator for 2D points
function Base.:+(p‚ÇÅ::Point2, p‚ÇÇ::Point2)
    # only operate on points/vectors in the same reference frame
    @assert p‚ÇÅ.ùëâ.name ‚â† "null" && p‚ÇÇ.ùëâ.name ‚â† "null"
    @assert p‚ÇÅ.ùëâ.name == p‚ÇÇ.ùëâ.name
    return Point2(p‚ÇÅ.x + p‚ÇÇ.x, p‚ÇÅ.y + p‚ÇÇ.y, p‚ÇÅ.ùëâ)
end

# extending `-` binary operator for 2D points
function Base.:-(p‚ÇÅ::Point2, p‚ÇÇ::Point2)
    # only operate on points/vectors in the same reference frame; output wrt p‚ÇÇ (hence null)
    @assert p‚ÇÅ.ùëâ.name ‚â† "null" && p‚ÇÇ.ùëâ.name ‚â† "null"
    @assert p‚ÇÅ.ùëâ.name == p‚ÇÇ.ùëâ.name
    return Point2(p‚ÇÅ.x - p‚ÇÇ.x, p‚ÇÅ.y - p‚ÇÇ.y, Frame2(0, 0, 0, "null"))
end

# extending `-` unary operator for 2D points
Base.:-(p::Point2) = Point2(-p.x, - p.y, p.ùëâ)

# returns the L·µñ-norm of a 2D pose or point. extending the base linear algebra method.
function LinearAlgebra.norm(p2::GeometricEntity2D; p::Real=2)
    return LinearAlgebra.norm([p2.x, p2.y], p)
end


"""
Map setup and query utils
"""

# returns a matrix of size w/res √ó l/res, filling elements between and including the two
# scalar functions f and g with the high value. rest of the map above f is filled with low
# value and below g is filled with the undefined value. note: g(x) ‚â§ f(x) for int x in 1:n
# and the arguments length (l), width (w), and resolution (res) are in meters.
function generate_map(l::Real, w::Real, f::Function; g::Function=zero, res=1e-3, low=0.0,
    high=10.0, und=Inf64)
    # get map dims; initialize map to free space
    @assert (res ‚â§ l) && (res ‚â§ w)
    m, n = (w / res, l / res) .|> round .|> Int
    map = fill(low, (m, n))

    # iterate over length to assign elements with high/undefined values according to f and g
    for x = 1:n
        f_val, g_val = (f(x), g(x)) .|> round .|> Int
        f_idx = (0 ‚â§ f_val) ? min(f_val + 1, m) : continue  # object not present if f(x) < 0
        g_idx = (0 ‚â§ g_val) ? min(g_val + 1, f_idx) : 1     # no undef elements if g(x) < 0
        obj_vec = vcat(fill(und, (g_idx - 1, 1)), fill(high, (f_idx - g_idx + 1, 1)))
        @inbounds map[1:f_idx, x] = obj_vec # slice in object val vector
    end

    return Map(map, low, high, und, res)
end

# returns the map data at the closest integer index [y, x]; if out of bounds, then assumed
# to be unobstructed and returns map.low
function map_value(x::Real, y::Real, map::Map)
    @unpack low, map = map
    x, y = (x, y) .|> round .|> Int

    if checkbounds(Bool, map, y, x)
        return @inbounds map[y, x]
    else
        return low
    end
end


"""
Map and pose plotting utils
"""

# plots map matrix as a heatmap with appropriate dimensions along the axes. Œîx and Œîy are
# the x and y tick step sizes for the plot, respectively. x‚Çõ and y‚Çõ are the starting steps
# for x and y axes so that ticks near origin do not collide. all units in are in meters.
function plot_map(map::Map; Œîx=0.5, Œîy=0.2, x‚Çõ=0.0, y‚Çõ=0.1)
    @unpack map, res = map
    m, n = size(map)
    heatmap(map)
    xticks!([(x‚Çõ / res):(Œîx / res):n; n], [x‚Çõ:Œîx:(n * res); (n * res)] .|> string)
    yticks!([(y‚Çõ / res):(Œîy / res):m; m], [y‚Çõ:Œîy:(m * res); (m * res)] .|> string)
    xlabel!("Length (m)")
    ylabel!("Width (m)")
end

# plots a 2D geometric entity as a point
function plot_points(gs::Vector{G‚ÇÇ}; color::S="red") where
    {G‚ÇÇ <: GeometricEntity2D,S <: AbstractString}
    scatter!(getfield.(gs, :x), getfield.(gs, :y), legend=false, color=color)
end
